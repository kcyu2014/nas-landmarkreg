import IPython
import yaml
import math
from kubernetes import client, config
from kubernetes.client.rest import ApiException
import os
# load the default configs.
from kubernetes.client import V1Job
from argparse import ArgumentParser
import time

NAMESPACE='cvlab-deadline'
INTERACTIVE_UPPER_LIMIT = 14 * 24 * 3600
config.load_kube_config()
parser = ArgumentParser('kubernetes submission')
parser.add_argument('--script', type=str, default=None, required=True,
                    help='Task Submission file, generated by other scripts.')
parser.add_argument('--job_template', type=str, default=None, help='to choose the default file.')
parser.add_argument('--gpu', type=int, default=1, help='GPU number')
parser.add_argument('--cpu', type=int, default=None, help='CPU number for each experiments')
parser.add_argument('--time', type=float, default=4, help='Running days for each job.')
parser.add_argument('--job_name', type=str, default=None, help='Job name')
parser.add_argument('--runtype', type=str, default='job', choices=['job', 'pod'])
parser.add_argument('--partition', type=str, default='gpu', help='Partition to differentiate the '
                                                                 'interactive job and others.')
parser.add_argument('--force-delete', default=False, action='store_true', help='force to delete the pod if exists.')


def obtain_default_job_object(path=None):
    path = path or os.path.dirname(__file__) + '/template_iclr_experiments.yaml' 
    with open(path, 'r') as f:
        job_t = yaml.safe_load(f)
        job_t = V1Job(job_t['apiVersion'], kind=job_t['kind'], metadata=job_t['metadata'], spec=job_t['spec'])
    
    return job_t


def create_job(job_t):
    k8s_apps_v1 = client.BatchV1Api()
    resp = k8s_apps_v1.create_namespaced_job(namespace=NAMESPACE, body=job_t)
    print("Job created. status='%s'" % resp.metadata.name)


def create_pod(pod_t, original_command=None):
    """Interactive pod creation. Add the support of wait and run

    Parameters
    ----------
    pod_t : PodSpec
    original_command : list[str], optional
        can pass for visualization purpose, by default None
    """

    resp = client.CoreV1Api().create_namespaced_pod(namespace=NAMESPACE, body=pod_t)
    pod_name = resp.metadata.name
    print("Interactive Pod created. name='%s'" % pod_name)
    if original_command:
        print("Please try to execute this command to check:")
        print("Original command: ", original_command)
    try:
        api_instance = client.CoreV1Api()
        waitSecond = 0
        while waitSecond < 3600:
            time.sleep(1)
            waitSecond += 1
            api_ressponse = api_instance.read_namespaced_pod(name=pod_name, namespace=NAMESPACE)
            if api_ressponse.status.phase == 'Running':
                print("Pod is now running!")
                break
            if waitSecond % 10 == 0:
                print(f"Waiting {waitSecond} ...") 
        
    except ApiException as e:
        print('Found exception in reading the logs')
    os.system(f'kubectl exec -it {pod_name} -- bash')


def process_name(args):

    if args.job_name:
        name = args.job_name.replace('_', '-').lower()
        name = name.replace('.', '').replace('/', '-')

        if len(name) > 63:
            name = name[:4] + '--' + name[-57:]
        if args.partition == 'interactive':
            name += '-interactive'
            k_type = 'pod'
    else:
        name = 'default'
    name = name.replace('=', '-').replace('_', '-')
    return name 


if __name__ == '__main__':
    args = parser.parse_args()
    k_type = args.runtype
    name = process_name(args)
    if args.script == 'delete' or args.force_delete:
        # DELETE the pod accordingly.
        if args.partition == 'interactive':
            k_type = 'pod'
        os.system('kubectl delete {} {} --grace-period 0'.format(k_type, name))

        if args.script == 'delete':
            print('deleting script, stop here.')
            exit()
    elif args.script == 'nohup':
        print('do not submit a job here.')
        exit()

    print("Running script at ", args.script)
    job = obtain_default_job_object(args.job_template)
    job.spec['activeDeadlineSeconds'] = int(args.time * 24 * 3600)
    job.metadata['name'] = name
    new_containers = job.spec['template']['spec']['containers'][0]
    new_containers['command'] = ['bash', args.script]
    
    # Wrapping the cpu partition into account.
    if args.partition == 'cpu':
        args.gpu = 0
    elif args.partition == 'gpu':
        args.gpu = math.ceil(float(args.gpu) / 2)
    elif args.partition in ['v100', 'q6', 'q8'] :
        pass
    
    print(f"Using {args.gpu} V100.")
    new_containers['resources']['limits']['nvidia.com/gpu'] = int(args.gpu)
    if args.cpu is None:
        try:
            num_cpu = int(new_containers['resources']['limits']['cpu'])
        except KeyError:
            num_cpu = 8
    else:
        num_cpu = args.cpu
    print(f"Using {num_cpu} CPUs ")
    new_containers['resources']['limits']['cpu'] = num_cpu

    print("New containers ", job.spec['template']['spec']['containers'][0])

    if args.partition == 'interactive':
        print("Creating interactive pod for debugging.")
        interactive_pod = job.spec['template']
        if 'metadata' not in interactive_pod.keys():
            interactive_pod['metadata'] = job.metadata
        interactive_pod['metadata']['name'] = name

        for c_spec in interactive_pod['spec']['containers']:
            orig_command = c_spec['command']
            c_spec['command'] = ['sleep', str(INTERACTIVE_UPPER_LIMIT)]
        create_pod(interactive_pod, original_command=orig_command)
    else:
        if args.runtype == 'pod':
            # create pod
            interactive_pod = job.spec['template']
            if 'metadata' not in interactive_pod.keys():
                interactive_pod['metadata'] = job.metadata
            interactive_pod.metadata.name = name 

            create_pod(interactive_pod)
        elif args.runtype == 'job':
            create_job(job)
